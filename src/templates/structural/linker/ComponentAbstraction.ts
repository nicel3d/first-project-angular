/**
 * Базовый класс Компонент объявляет общие операции как для простых, так и для
 * сложных объектов структуры.
 */
export abstract class Component {
  protected parent: Component;

  /**
   * При необходимости базовый Компонент может объявить интерфейс для
   * установки и получения родителя компонента в древовидной структуре. Он
   * также может предоставить некоторую реализацию по умолчанию для этих
   * методов.
   */
  public setParent(parent: Component) {
    this.parent = parent;
  }

  public getParent(): Component {
    return this.parent;
  }

  /**
   * В некоторых случаях целесообразно определить операции управления
   * потомками прямо в базовом классе Компонент. Таким образом, вам не нужно
   * будет предоставлять конкретные классы компонентов клиентскому коду, даже
   * во время сборки дерева объектов. Недостаток такого подхода в том, что эти
   * методы будут пустыми для компонентов уровня листа.
   */
  public add(component: Component): void { }

  public remove(component: Component): void { }

  /**
   * Вы можете предоставить метод, который позволит клиентскому коду понять,
   * может ли компонент иметь вложенные объекты.
   */
  public isComposite(): boolean {
    return false;
  }

  /**
   * Базовый Компонент может сам реализовать некоторое поведение по умолчанию
   * или поручить это конкретным классам, объявив метод, содержащий поведение
   * абстрактным.
   */
  public abstract operation(): string;
}
